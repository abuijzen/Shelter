// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shelter.shared;

namespace Shelter.mvc.Migrations
{
    [DbContext(typeof(ShelterContext))]
    [Migration("20200110230206_SeedShelter1Animals")]
    partial class SeedShelter1Animals
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Shelter.shared.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Allergies")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Bio")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsAnimalFriendly")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFertile")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsKidFriendly")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSpeciesFriendly")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Race")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ShelterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Since")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ShelterId");

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Allergies = "catnip",
                            Bio = "Felix is een iets schuwere kat die een baasje nodig heeft met veel geduld.",
                            DateOfBirth = new DateTime(2005, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAnimalFriendly = true,
                            IsFertile = false,
                            IsKidFriendly = true,
                            IsSpeciesFriendly = true,
                            Name = "Felix",
                            Race = "Britse Korthaar",
                            ShelterId = 1,
                            Since = new DateTime(2007, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Allergies = "dogs",
                            Bio = "Picasso is een kat die samen met Binky geplaatst dient te worden.",
                            DateOfBirth = new DateTime(2005, 3, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAnimalFriendly = true,
                            IsFertile = false,
                            IsKidFriendly = true,
                            IsSpeciesFriendly = true,
                            Name = "Picasso",
                            Race = "Ragdoll",
                            ShelterId = 1,
                            Since = new DateTime(2007, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Allergies = "none",
                            Bio = "Ior is een kindvriendelijk konijn die graag bij andere konijntjes gezet wordt indien mogelijk.",
                            DateOfBirth = new DateTime(2017, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAnimalFriendly = true,
                            IsFertile = false,
                            IsKidFriendly = true,
                            IsSpeciesFriendly = true,
                            Name = "Ior",
                            Race = "Hollander",
                            ShelterId = 1,
                            Since = new DateTime(2018, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Allergies = "geen",
                            Bio = "Minoes is een sociale en lieve kitten die net van een nestje komt.",
                            DateOfBirth = new DateTime(2010, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAnimalFriendly = true,
                            IsFertile = true,
                            IsKidFriendly = true,
                            IsSpeciesFriendly = true,
                            Name = "Minoes",
                            Race = "Europese Korthaar",
                            ShelterId = 1,
                            Since = new DateTime(2019, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Allergies = "geen",
                            Bio = "Binky is een kat die samen met Picasso geplaatst dient te worden.",
                            DateOfBirth = new DateTime(2016, 11, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAnimalFriendly = true,
                            IsFertile = true,
                            IsKidFriendly = true,
                            IsSpeciesFriendly = true,
                            Name = "Binky",
                            Race = "Europese Korthaar",
                            ShelterId = 1,
                            Since = new DateTime(2018, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Allergies = "Chocolade",
                            Bio = "Mopsie is een gezonde mopshond gered uit de broodfok",
                            DateOfBirth = new DateTime(2017, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAnimalFriendly = true,
                            IsFertile = false,
                            IsKidFriendly = true,
                            IsSpeciesFriendly = true,
                            Name = "Mopsie",
                            Race = "Mopshond",
                            ShelterId = 1,
                            Since = new DateTime(2018, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Shelter.shared.Cat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Clawed")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Cats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Clawed = true
                        },
                        new
                        {
                            Id = 2,
                            Clawed = true
                        },
                        new
                        {
                            Id = 4,
                            Clawed = true
                        },
                        new
                        {
                            Id = 5,
                            Clawed = true
                        });
                });

            modelBuilder.Entity("Shelter.shared.Dog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Barker")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Dogs");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            Barker = false
                        });
                });

            modelBuilder.Entity("Shelter.shared.Employees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Employees");
                });

            modelBuilder.Entity("Shelter.shared.Rabbit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Rabbits");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Size = "groot"
                        });
                });

            modelBuilder.Entity("Shelter.shared.Shelter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EmailAdress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Shelters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Kievitstraat 40",
                            EmailAdress = "/",
                            ImageUrl = "canina",
                            Name = "Canina",
                            TelephoneNumber = "036771291"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Toekomststraat 4",
                            EmailAdress = "veeweyde.weelde@skynet.be",
                            ImageUrl = "image",
                            Name = "Veeweyde vzw",
                            TelephoneNumber = "014658626"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Houwaartstraat 15, 3210 Lubbeek",
                            EmailAdress = "info@kat-lijn.be",
                            ImageUrl = "https://www.dierendonatie.be/wp-content/uploads/2019/01/29570550_2080399628857532_4696137069563272630_n.jpg",
                            Name = "kat-lijn vzw",
                            TelephoneNumber = "0468 56 93 72"
                        });
                });

            modelBuilder.Entity("Shelter.shared.Administrator", b =>
                {
                    b.HasBaseType("Shelter.shared.Employees");

                    b.Property<int?>("ShelterId")
                        .HasColumnType("int");

                    b.HasIndex("ShelterId");

                    b.HasDiscriminator().HasValue("Administrator");
                });

            modelBuilder.Entity("Shelter.shared.Caretaker", b =>
                {
                    b.HasBaseType("Shelter.shared.Employees");

                    b.Property<int?>("ShelterId")
                        .HasColumnName("Caretaker_ShelterId")
                        .HasColumnType("int");

                    b.HasIndex("ShelterId");

                    b.HasDiscriminator().HasValue("Caretaker");
                });

            modelBuilder.Entity("Shelter.shared.Manager", b =>
                {
                    b.HasBaseType("Shelter.shared.Employees");

                    b.Property<int?>("ShelterId")
                        .HasColumnName("Manager_ShelterId")
                        .HasColumnType("int");

                    b.HasIndex("ShelterId");

                    b.HasDiscriminator().HasValue("Manager");
                });

            modelBuilder.Entity("Shelter.shared.Animal", b =>
                {
                    b.HasOne("Shelter.shared.Shelter", null)
                        .WithMany("Animals")
                        .HasForeignKey("ShelterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shelter.shared.Administrator", b =>
                {
                    b.HasOne("Shelter.shared.Shelter", null)
                        .WithMany("Administrators")
                        .HasForeignKey("ShelterId");
                });

            modelBuilder.Entity("Shelter.shared.Caretaker", b =>
                {
                    b.HasOne("Shelter.shared.Shelter", null)
                        .WithMany("Caretakers")
                        .HasForeignKey("ShelterId");
                });

            modelBuilder.Entity("Shelter.shared.Manager", b =>
                {
                    b.HasOne("Shelter.shared.Shelter", null)
                        .WithMany("Managers")
                        .HasForeignKey("ShelterId");
                });
#pragma warning restore 612, 618
        }
    }
}
